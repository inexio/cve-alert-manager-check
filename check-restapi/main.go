package main

import (
	"github.com/go-resty/resty/v2"
	"github.com/inexio/go-monitoringplugin"
	"github.com/jessevdk/go-flags"
	"os"
	"regexp"
	"time"
)

const validDuration = "168h"

var opts struct {
	URL      string `short:"U" long:"url" description:"The url of the restapi" required:"true"`
	Username string `short:"u" long:"username" description:"The username for the login of the restapi, not needed if no authentication is set for the restapi" required:"false"`
	Password string `short:"p" long:"password" description:"The password for the login of the restapi, not needed if no authentication is set for the restapi" required:"false"`
}

func main() {
	_, err := flags.ParseArgs(&opts, os.Args)
	if err != nil {
		os.Exit(3) //parseArgs() prints errors to stdout
	}

	response := monitoringplugin.NewResponse("checked")
	defer response.OutputAndExit()

	client := resty.New()
	var resp *resty.Response

	if (opts.Username == "") || (opts.Password == "") {
		resp, err = client.R().EnableTrace().Get(opts.URL + "/cvecase")
		if err != nil {
			response.UpdateStatus(monitoringplugin.UNKNOWN, "Could not get cve case: "+err.Error())
			return
		}
	} else {
		resp, err = client.R().EnableTrace().SetBasicAuth(opts.Username, opts.Password).Get(opts.URL + "/cvecase")
		if err != nil {
			response.UpdateStatus(monitoringplugin.UNKNOWN, "Could not get cve case: "+err.Error())
			return
		}
	}

	if resp.String() == "{\"message\":\"Unauthorized\"}" {
		response.UpdateStatus(monitoringplugin.UNKNOWN, "Restapi has set a username and password, login data is required!")
		return
	}

	regex := regexp.MustCompile("\\d{4}-[01]\\d-[0123]\\d [012]\\d:[012345]\\d:[012345]\\d")
	dateCreated := regex.FindString(resp.String())
	t, _ := time.Parse("2006-01-02 15:04:05", dateCreated)

	duration, _ := time.ParseDuration(validDuration)

	if time.Since(t) > duration {
		response.UpdateStatus(monitoringplugin.CRITICAL, "The Database didn't received any new entries in the last "+duration.String())
		return
	}
}
