package main

import (
	"github.com/inexio/go-monitoringplugin"
	"github.com/jessevdk/go-flags"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"github.com/taknb2nch/go-pop3"
	"os"
	"regexp"
	"time"
)

const refreshDuration = "45m0s"

var opts struct {
	Hostname string `short:"h" long:"hostname" description:"The hostname" required:"true"`
	Username string `short:"u" long:"username" description:"The username of the pop3 client" required:"true"`
	Password string `short:"p" long:"password" description:"The password for the pop3 client" required:"true"`
}

func newPop3Client(host, user, password string) (*pop3.Client, error) {
	client, err := pop3.Dial(host)
	if err != nil {
		err := errors.Wrap(err, "Failed to connect to POP3 Server")
		return nil, err
	}

	if err = client.User(user); err != nil {
		err := errors.Wrap(err, "Error during POP3-User Command")
		return nil, err
	}

	if err = client.Pass(password); err != nil {
		err := errors.Wrap(err, "Error during POP3-Pass Command")
		return nil, err
	}

	return client, nil
}

func closePop3Client(client *pop3.Client) error {
	err := client.Quit()
	if err != nil {
		log.Error().
			AnErr("Error", err).
			Msg("Error while quitting POP3 Client")
		return err
	}
	err = client.Close()
	if err != nil {
		err := errors.Wrap(err, "Error while closing POP3 Connection")
		return err
	}

	return nil
}

func getMessageInfo(client *pop3.Client) ([]pop3.MessageInfo, error) {
	var mis []pop3.MessageInfo
	mis, err := client.UidlAll()
	if err != nil {
		err := errors.Wrap(err, "Error while getting Mail UIDs")
		return nil, err
	}

	return mis, nil
}

func main() {
	_, err := flags.ParseArgs(&opts, os.Args)
	if err != nil {
		os.Exit(3) //parseArgs() prints errors to stdout
	}

	response := monitoringplugin.NewResponse("checked")
	defer response.OutputAndExit()

	client, err := newPop3Client(opts.Hostname, opts.Username, opts.Password)
	if err != nil {
		response.UpdateStatus(monitoringplugin.UNKNOWN, "Could not connect to POP3 Client: "+err.Error())
		return
	}
	defer func() {
		err = closePop3Client(client)
		if err != nil {
			response.UpdateStatus(monitoringplugin.UNKNOWN, "Could not disconnect POP3 Client: "+err.Error())
			return
		}
	}()

	messageInfo, err := getMessageInfo(client)
	if err != nil {
		response.UpdateStatus(monitoringplugin.UNKNOWN, "Could not get message info: "+err.Error())
		return
	}

	regex := regexp.MustCompile("..., .. ... .... ..:..:.. .....")
	duration, _ := time.ParseDuration(refreshDuration)

	for _, mi := range messageInfo {

		content, err := client.Retr(mi.Number)
		if err != nil {
			response.UpdateStatus(monitoringplugin.UNKNOWN, "Error during POP3-Retr Command: "+err.Error())
			return
		}

		dateReceived := regex.FindString(content)
		t, _ := time.Parse(time.RFC1123Z, dateReceived)

		if time.Since(t) > duration {
			response.UpdateStatus(monitoringplugin.CRITICAL, "The POP3-Client contains E-Mails older than 45min!")
			return
		}
	}
}
